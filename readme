来自 nginx官网

nginx rewrite
需要正则表达式基础
 先了解 location

location的作用是根据用户请求的URI 来执行不同的应用，也就是根据用户请求的网址URL进行匹配，匹配成功即进行相关操作。
location 常用语法

语法：location [= | 〜| 〜* | ^〜] uri {...}
location 指令
[= | 〜| 〜* | ^〜] 匹配符
uri 网站地址
{...} 配置段

根据请求URI设置配置。在解码“％XX”形式编码的文本，解析对相对路径分量“。”和“..”的引用，并且可能将两个或更多相邻斜线压缩为单斜杠。

位置可以由前缀字符串或正则表达式定义。正则表达式使用前面的“〜*”修饰符（用于不区分大小写的匹配）或“〜”修饰符（用于区分大小写的匹配）指定。
要查找匹配给定请求的位置，nginx首先检查使用前缀字符串（前缀位置）定义的位置。
其中，选择并记住具有最长匹配前缀的位置。然后按照它们在配置文件中出现的顺序检查正则表达式。
正则表达式的搜索在第一次匹配时终止，并使用相应的配置。如果找不到与正则表达式的匹配，则使用先前记住的前缀位置的配置。

还可以用逻辑操作符'!'对上面的匹配结果取反

位置块可以嵌套，但有一些例外如下所述。

对于不区分大小写的操作系统，如macOS和Cygwin，与前缀字符串匹配会忽略一个案例（0.7.7）。但是，比较仅限于一个字节的区域设置。

正则表达式可以包含稍后可用于其他指令的捕获（0.7.40）。

如果最长匹配的前缀位置具有“^〜”修饰符，则不检查正则表达式。

另外，使用“=”修饰符可以定义URI和位置的精确匹配。如果找到完全匹配，则搜索结束。例如，如果“/”请求频繁发生，定义“位置= /”将加速处理这些请求，因为搜索在第一次比较之后立即终止。这样的位置显然不能包含嵌套位置。

下面是一组例子

location = / {
    [ configuration A ]
}

location / {
    [ configuration B ]
}

location /documents/ {
    [ configuration C ]
}

location ^~ /images/ {
    [ configuration D ]
}

location ~* \.(gif|jpg|jpeg)$ {
    [ configuration E ]
}

“/”请求将与配置A匹配，
 /index.html“请求将匹配配置B，
 ”/documents/document.html“请求将匹配配置C，
 ”/images/1.gif“请求将匹配配置D，
 ”/documents/1.jpg“请求将匹配配置E.


”前缀定义了一个命名的位置。这样的位置不用于常规的请求处理，而是用于请求重定向。它们不能嵌套，也不能包含嵌套位置。

如果位置由以斜杠字符结尾的前缀字符串定义，并且请求由proxy_pass，fastcgi_pass，uwsgi_pass，scgi_pass，memcached_pa​​ss或grpc_pass中的一个进行处理，则会执行特殊处理。为了响应URI等于此字符串的请求，但没有结尾的斜杠，使用代码301的永久重定向将返回到所请求的URI，并附加斜线。如果不需要，可以像这样定义URI和位置的精确匹配：

location / user / {
proxy_pass http://user.example.com;
}

location = / user {
proxy_pass http://login.example.com;
}

不用URI及特殊字符组合匹配 顺序
location =/ 精确匹配 /
location ^~/images/ 匹配常规字符串，不做正则检查
location ~* \.(gif|jpg|jpeg)$ 正则匹配
location /documents/ 匹配常规字符串 如果有正则优先匹配正则
location / 所有location都不能匹配后进行的默认匹配

last 本条规则匹配完成后，继续向下匹配新的规则
break 本条规则匹配完成即终止，不再匹配后面的任何规则
redirect 返回302临时重定向 浏览器地址栏会显示跳转后的url地址
permanent 返回301永久重定向 浏览器地址栏会显示跳转后的url地址



if
语法: if (condition) { ... }

默认: none

作用域: server, location

Checks the truth of a condition. If the condition evaluates to true, then the code indicated in the curly braces is carried out and the request is processed in accordance with the configuration within the following block. Configuration inside directive if is inherited from the previous level.

They can be assigned as the condition: 条件语句可以使下列的几种：

the name of variable; false values are: empty string "", or any string starting with "0";
 一个变量的名称；如果变量的值为空字符串""或者任何以0开始的字符串，则表示条件语句的值为假
the comparison of variable with the line with using the = and != operators;
pattern matching with regular expressions using the symbols ~* and ~:
正则表达式形式的模式匹配，如~*和~
~ is case-sensitive match;
‘~’表示大小写敏感的匹配
~* specifies a case-insensitive match (firefox matches FireFox)
‘~*’表示大小写不敏感的匹配（例如：“firefox”字符串可以成功匹配“FireFox”）
!~ and !~* mean the opposite, "doesn't match"
 !~和!~*代表跟后面的正则匹配规则相反的规则，表示不能匹配当前正则表达式规则的字符串执行后面的处理语句
checking for the existence of a file using the -f and !-f operators;使用-f参数以及!-f参数检测一个文件是否存在
checking existence of a directory using the -d and !-d operators;使用-d参数以及!-d参数检测一个目录（路径）是否存在
checking existence of a file, directory or symbolic link using the -e and !-e operators;
使用-e以及!-e检测是否存在一个文件，一个目录或者一个符号链接。

checking whether a file is executable using the -x and !-x operators.使用-x以及!-x检测一个文件是否可执行

Parts of the regular expressions can be in parentheses, whose value can then later be accessed in the $1 to $9 variables.

正则表达式部分可以嵌套，表达式后面的部分如果用到前面的表达式可以用 $1 到$9 变量表示。

Examples of use: 例子如下：

if ($http_user_agent ~ MSIE) {
: rewrite  ^(.*)$  /msie/$1  break;
}
if ($http_cookie ~* "id=([^;] +)(?:;|$)" ) {
: set  $id  $1;
}
if ($request_method = POST ) {
: return 405;
}
if (!-f $request_filename) {
: break;
: proxy_pass  http://127.0.0.1;
}
if ($slow) {
: limit_rate  10k;
}
if ($invalid_referer) {
: return   403;
}
The value of the built-in variable $invalid_referer is given by the directive valid_referers.

Template:Anchor

return
语法: return code

默认值: none

作用域: server, location, if

This directive concludes execution of the rules and returns the status code indicated to client. It is possible to use the following values: 204, 400, 402-406, 408, 410, 411, 413, 416 and 500-504. Furthermore, nonstandard code 444 closes the connection without sending any headers.

这个指令根据规则的执行情况，返回一个状态值给客户端。可使用值包括：204，400，402-406，408，410，411，413，416以及500-504。也可以发送非标准的444代码-未发送任何头信息下结束连接。

Template:Anchor

rewrite
语法: rewrite regex replacement flag

默认: none

作用域: server, location, if

This directive changes URI in accordance with the regular expression and the replacement string. Directives are carried out in order of appearance in the configuration file.

这个指令根据正则表达式或者待替换的字符串来更改URI。指令根据配置文件中的先后顺序执行生效。

Be aware that the rewrite regex only matches the relative path instead of the absolute URL. If you want to match the hostname, you should use an if condition, like so:

注意：重写规则只匹配相对路径（不包括绝对的URL）。如果你想配对主机名，你应该使用if语句，如下：

if ($host ~* www\.(.*)) {
: set $host_without_www $1;
: rewrite ^(.*)$ http://$host_without_www$1 permanent; # $1 contains '/foo', not 'www.mydomain.com/foo'
}
Flags make it possible to end the execution of rewrite directives. flag标记可以停止重定向规则的执行

If the replacement string begins with http:// then the client will be redirected, and any further rewrite directives are terminated. 如果替换字符串以“http:”开始，客户端会被重定向，而且其他的重定向规则都会被终止。

Flags can be any of the following: 可用的flag标记有：

last - completes processing of rewrite directives, after which searches for corresponding URI and location
 完成该rewrite规则的执行，之后查找符合的URI和location
break - completes processing of rewrite directives
 终止匹配，不再匹配后面的规则
redirect - returns temporary redirect with code 302; it is used if the substituting line begins with http://
 返回302临时重定向，当替代行以http:开始时可以使用，地址栏会显示跳转后的地址
permanent - returns permanent redirect with code 301
 返回301永久重定向
Note that if an redirect is relative (has no host part), then when redirecting Nginx uses the "Host" header if the header match name of server_name directive or the first name of server_name directive, if the header does not match or is absent. If no server_name is set, then the local hostname is used. If you want Nginx to always use the "Host" header, you can use a wildcard "*" server_name (but see the restrictions on doing so).Example:


rewrite  ^(/download/.*)/media/(.*)\..*$  $1/mp3/$2.mp3  last;
rewrite  ^(/download/.*)/audio/(.*)\..*$  $1/mp3/$2.ra   last;
return   403;
But if we place these directives in location /download/, then it is necessary to replace flag "last" by "break", otherwise nginx will hit the 10 cycle limit and return error 500:

如果我们将当前的匹配规则使用在/download/目录下，就要将"last"替换为"break"了。否则nginx就会达到10次循环的上限，然后返回个500错误
location /download/ {
: rewrite  ^(/download/.*)/media/(.*)\..*$  $1/mp3/$2.mp3  break;
: rewrite  ^(/download/.*)/audio/(.*)\..*$  $1/mp3/$2.ra   break;
: return   403;
}
If in the line of replacement arguments are indicated, then the rest of the request arguments are appended to them. To avoid having them appended, place a question mark as the last character:

: rewrite  ^/users/(.*)$  /show?user=$1?  last;
注: 对花括号( { 和 } )来说, 他们既能用在重定向的正则表达式里，也是用在配置文件里分割代码块, 为了避免冲突, 正则表达式里带花括号的话，应该用双引号（或者单引号）包围。比如，要将类似以下的url


/photos/123456
重定向到：


/path/to/photos/12/1234/123456.png
可以用以下方法 (注意双引号):

rewrite  "/photos/([0-9] {2})([0-9] {2})([0-9] {2})" /path/to/photos/$1/$1$2/$1$2$3.png;
Template:Anchor

set
syntax: set variable value

default: none

context: server, location, if

Directive establishes value for the variable indicated. As the value it is possible to use a text, variables and their combination.

Template:Anchor

uninitialized_variable_warn
syntax: uninitialized_variable_warn on|off

default: uninitialized_variable_warn on

context: http, server, location, if

Enables or disables logging of warnings about noninitialized variables.

Internally, the rewrite directives are compiled at the time the configuration file is loaded into internal codes, usable during the request by the interpreter.

This interpreter is a simple stack virtual machine. For example, the directive:

location /download/ {
: if ($forbidden) {
: return   403;
: }
: if ($slow) {
: limit_rate  10k;
: }
: rewrite  ^/(download/.*)/media/(.*)\..*$  /$1/mp3/$2.mp3  break;
}
will be compiled into this sequence:

: variable $forbidden
: checking to zero
: recovery 403
: completion of entire code
: variable $slow
: checking to zero
: checkings of regular expression
: copying "/"
: copying $1
: copying "/mp3/"
: copying $2
: copying "..mpe"
: completion of regular expression
: completion of entire sequence
Note that there is no code for directive limit_rate, since it does not refer to module ngx_http_rewrite_module. The "if" block exists in the same part of the configuration as the "location" directive.

If $slow is true, then what's inside the "if" block is evaluated, and in this configuration limit_rate it is equal to 10k.

Directive:

: rewrite  ^/(download/.*)/media/(.*)\..*$  /$1/mp3/$2.mp3  break;
It is possible to reduce the sequence, if in the regular expression we include the first slash inside the parentheses:

: rewrite  ^(/download/.*)/media/(.*)\..*$  $1/mp3/$2.mp3  break;
then the sequence will appear like this:

: checking regular expression
: copying $1
: copying "/mp3/"
: copying $2
: copying "..mpe"
: completion of regular expression
: completion of entire code